name: Publish Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      packages:
        description: 'Packages to release (all, specific packages, or a comma-separated list)'
        required: false
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      npm_token:
        description: 'NPM token for publishing packages'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true
    outputs:
      release_tag:
        description: 'The created release tag'
        value: ${{ jobs.publish.outputs.release_tag }}

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.push_tags.outputs.release_tag }}
    steps:
      - name: üë∑ Checkout target branch for release
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          # Always checkout the actual target branch passed from calculate job
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üèóÔ∏è Build packages
        uses: ./.github/workflows/actions/build-verify

      - name: üì¶ Configure NPM registry
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would configure NPM registry for publishing"
          else
            # Set up NPM authentication for publishing
            pnpm set registry "https://registry.npmjs.org/"
            pnpm set //registry.npmjs.org/:_authToken ${{ secrets.npm_token }}
            pnpm whoami
          fi

      - name: üîÑ Calculate version & create tag
        id: versioning
        run: pnpx tsx .github/workflows/scripts/calculate-version.ts
        env:
          # Pass inputs as environment variables, prefixed with INPUT_
          INPUT_PACKAGES: ${{ inputs.packages }}
          INPUT_RELEASE_VERSION: ${{ inputs.release_version }}
          INPUT_DRY_RUN: ${{ inputs.dry_run }}
          # GITHUB_WORKSPACE is automatically available

      - name: üì¢ Publish to NPM
        shell: bash
        id: npm_publish
        continue-on-error: true
        run: |
          # Get the new version from the previous step's output
          NEW_VERSION="${{ steps.versioning.outputs.new_version }}"
          if [[ -z "$NEW_VERSION" ]]; then
            echo "::error::Failed to get NEW_VERSION from the versioning step."
            exit 1
          fi
          echo "Retrieved NEW_VERSION: $NEW_VERSION"

          # Get NPM tag based on version
          if [[ "$NEW_VERSION" =~ (beta|alpha|rc|pre) ]]; then
            TAG="next"
          else
            TAG="latest"
          fi
          echo "Using NPM tag: $TAG"

          # Helper function to get package directory name from possibly scoped package name
          get_pkg_dir_name() {
            local pkg_name="$1"
            # Strip @zubridge/ prefix if present
            echo "$pkg_name" | sed 's#^@zubridge/##'
          }

          # Helper function to check if package exists in packages directory
          check_pkg_exists() {
            local pkg_name="$1"
            local pkg_dir_name=$(get_pkg_dir_name "$pkg_name")
            if [[ -f "packages/$pkg_dir_name/package.json" ]]; then
              return 0 # Exists
            else
              return 1 # Doesn't exist
            fi
          }

          # For dry run, just echo what would happen
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would publish packages to NPM with tag '$TAG'"

            if [[ "${{ inputs.packages }}" == "all" ]]; then
              echo "Would publish all packages with tag $TAG"
              for pkg_raw in "${PKG_LIST[@]}"; do
                pkg_raw=$(echo "$pkg_raw" | xargs) # Trim whitespace
                if check_pkg_exists "$pkg_raw"; then
                   pkg_dir_name=$(get_pkg_dir_name "$pkg_raw")
                   echo "Would publish $pkg_dir_name package with tag $TAG"
                   hasPublishedPackages=true
                else
                   pkg_dir_name=$(get_pkg_dir_name "$pkg_raw")
                   # Standardized warning/error format
                   echo "::warning::[DRY RUN] Package $pkg_raw (path: packages/$pkg_dir_name) not found in packages directory."
                fi
              done
            elif [[ "${{ inputs.packages }}" == *","* ]]; then
              # For custom package list (potentially scoped)
              IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"
              hasPublishedPackages=false
              for input_pkg_name in "${PKG_LIST[@]}"; do
                input_pkg_name=$(echo "$input_pkg_name" | xargs) # Trim whitespace
                if check_pkg_exists "$input_pkg_name"; then
                   pkg_dir_name=$(get_pkg_dir_name "$input_pkg_name")
                   echo "Would publish $pkg_dir_name package with tag $TAG"
                   hasPublishedPackages=true
                else
                   pkg_dir_name=$(get_pkg_dir_name "$input_pkg_name")
                   # Standardized warning/error format
                   echo "::warning::[DRY RUN] Package $input_pkg_name (path: packages/$pkg_dir_name) not found in packages directory."
                fi
              done
            else
              if check_pkg_exists "${{ inputs.packages }}"; then
                 pkg_dir_name=$(get_pkg_dir_name "${{ inputs.packages }}")
                 echo "Would publish $pkg_dir_name package with tag $TAG"
              else
                 pkg_dir_name=$(get_pkg_dir_name "${{ inputs.packages }}")
                 echo "::warning::[DRY RUN] Package ${{ inputs.packages }} (path: packages/$pkg_dir_name) not found in packages directory."
              fi
            fi

            # Set publish status to success for dry run
            echo "publish_status=success" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Actual publish
          PUBLISH_EXIT_CODE=0
          if [[ "${{ inputs.packages }}" == "all" ]]; then
            # Publish all packages
            pnpx tsx scripts/publish.ts --tag=$TAG || PUBLISH_EXIT_CODE=$?
          elif [[ "${{ inputs.packages }}" == *","* ]]; then
            # Handle custom package list
            FILTER_CMD=""
            IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"
            for input_pkg_name in "${PKG_LIST[@]}"; do
              input_pkg_name=$(echo "$input_pkg_name" | xargs) # Trim whitespace
              pkg_dir_name=$(get_pkg_dir_name "$input_pkg_name")

              # Check if the package exists locally using the dir name
              if [[ -f "packages/$pkg_dir_name/package.json" ]]; then
                # Add filter for this package
                # Note: We're using directory paths (./packages/pkgDirName) which our publish.ts
                # script is set up to handle. It supports both directory paths and package names (@zubridge/pkgName)
                FILTER_CMD="$FILTER_CMD --filter=./packages/$pkg_dir_name"
              else
                echo "::error::Error: Package directory 'packages/$pkg_dir_name' not found. Aborting publish."
                exit 1
              fi
            done
            pnpx tsx scripts/publish.ts --tag=$TAG $FILTER_CMD || PUBLISH_EXIT_CODE=$?
          else
            # Single package case
            pkg_dir_name=$(get_pkg_dir_name "${{ inputs.packages }}")

            # Ensure the package directory exists
            if [ ! -d "./packages/$pkg_dir_name" ]; then
              echo "::error::Package directory ./packages/$pkg_dir_name does not exist"
              exit 1
            fi

            pnpx tsx scripts/publish.ts --tag=$TAG --filter=./packages/$pkg_dir_name || PUBLISH_EXIT_CODE=$?
          fi

          # Check if we had an "already published" error
          if [[ $PUBLISH_EXIT_CODE -ne 0 ]]; then
            # Check if the error was due to the package already being published
            if grep -q "already exists$\|already published$" <<< "$(pnpm view @zubridge/${{ inputs.packages }}@$NEW_VERSION 2>&1)" || grep -q "already exists$\|already published$" <<< "$(pnpm view @zubridge/${{ inputs.packages }}@$NEW_VERSION 2>&1)"; then
              echo "::warning::Package @zubridge/${{ inputs.packages }}@$NEW_VERSION is already published to npm. Continuing with the workflow."
              echo "publish_status=already_published" >> $GITHUB_OUTPUT
              # Set exit code to 0 to allow workflow to continue
              exit 0
            else
              # This was a real error, not just "already published"
              echo "::error::Failed to publish package. Error code: $PUBLISH_EXIT_CODE"
              echo "publish_status=failed" >> $GITHUB_OUTPUT
              exit $PUBLISH_EXIT_CODE
            fi
          else
            echo "publish_status=success" >> $GITHUB_OUTPUT
          fi
        env:
          # Pass the new version needed by the publish script (if it reads env vars)
          # Or preferably, modify publish.ts to accept version as an argument
          NEW_VERSION: ${{ steps.versioning.outputs.new_version }}

      - name: üîç Verify published packages
        shell: bash
        if: ${{ inputs.dry_run == 'true' || steps.npm_publish.outputs.publish_status != 'failed' }}
        run: bash .github/workflows/scripts/verify-published.sh
        env:
          # Pass necessary variables to the script environment
          INPUT_PACKAGES: ${{ inputs.packages }}
          INPUT_DRY_RUN: ${{ inputs.dry_run }}
          NEW_VERSION: ${{ steps.versioning.outputs.new_version }}
          # GITHUB_WORKSPACE is automatically available

      - name: üöÄ Push Tags and Commits
        id: push_tags
        shell: bash
        run: |
          # Get the new version from the versioning step's output
          NEW_VERSION="${{ steps.versioning.outputs.new_version }}"
          if [[ -z "$NEW_VERSION" ]]; then
             echo "::error::Failed to get NEW_VERSION from the versioning step."
             exit 1
          fi

          # Define the primary release tag for GitHub releases
          RELEASE_TAG="v${NEW_VERSION}"
          echo "Using version for tagging: $NEW_VERSION (release tag: $RELEASE_TAG)"

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would push tags created by package-versioner"
            echo "DRY RUN: Would push branch ${{ inputs.target_branch }}"
            echo "release_tag=${RELEASE_TAG}" >> "${GITHUB_OUTPUT}"
          else
            echo "Git log before push:"
            git log --oneline -n 5

            echo "Pushing tags and commits created by package-versioner..."
            git push --tags --no-verify
            git push origin "${{ inputs.target_branch }}" --no-verify

            echo "release_tag=${RELEASE_TAG}" >> "${GITHUB_OUTPUT}"
            echo "Successfully pushed tags and commits"
          fi

      - name: üìù Create GitHub Releases
        if: ${{ !inputs.dry_run }}
        run: |
          # Create the main release
          echo "Creating main GitHub release with tag ${{ steps.push_tags.outputs.release_tag }}"
          gh release create "${{ steps.push_tags.outputs.release_tag }}" \
            --draft \
            --generate-notes \
            --title "Release ${{ steps.push_tags.outputs.release_tag }}" \
            ${{ contains(inputs.release_version, 'pre') && '--prerelease' || '' }}
        env:
          GH_TOKEN: ${{ secrets.github_bot_token }}

      - name: üìã Log GitHub Release (dry run only)
        if: ${{ inputs.dry_run }}
        run: |
          echo "DRY RUN: Would create a GitHub release with:"
          echo "  - Tag name: ${{ steps.push_tags.outputs.release_tag }}"
          echo "  - Draft: true"
          echo "  - Generate release notes: true"
          echo "  - Prerelease: ${{ contains(inputs.release_version, 'pre') }}"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Title: Release ${{ steps.push_tags.outputs.release_tag }}"

      - name: Export TAG for reference in debug outputs
        if: ${{ !inputs.dry_run }}
        run: echo "TAG=$TAG" >> $GITHUB_ENV
